#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&mt TILDE GRAVE  &mt EXCLAMATION NUMBER_1  &mt N2 NUMBER_2  &mt HASH NUMBER_3  &mt DOLLAR NUMBER_4  &mt PERCENT N5  &mt CARET NUMBER_6         &mt AMPERSAND N7  &mt ASTERISK N8      &mt LEFT_PARENTHESIS N9  &mt RIGHT_PARENTHESIS N0  &mt UNDER MINUS
&kp TAB          &kp Q                     &kp W            &kp E              &kp R                &kp T                               &kp Y  &kp U             &kp I                &kp O                    &kp P                     &mt PLUS EQUAL
&kp CLCK         &mt LCTRL A               &mt LALT S       &mt LGUI D         &mt LSHIFT F         &kp G                               &kp H  &mt RSHIFT J      &mt RGUI K           &mt RALT L               &mt RCTRL SEMI            &kp APOS
&kp LSHIFT       &kp Z                     &kp X            &kp C              &kp V                &kp B                               &kp N  &kp M             &mt LESS_THAN COMMA  &mt GREATER_THAN DOT     &mt SLASH QUESTION        &kp ENTER
                 &lt 2 SPACE               &kp BACKSPACE    &kp LGUI           &lt 1 SPACE          &kp DEL         &kp ENTER                  &kp SPACE                              &lt 3 SPACE
            >;
        };

        NAV {
            bindings = <
&kp F12          &kp F1          &kp F2           &kp F3             &kp F4           &kp F5    &kp F6                &kp F7                         &kp F8                         &kp F9                     &kp F10                          &kp F11
&trans           &kp SCROLLLOCK  &kp PAUSE_BREAK  &trans             &kp EQUAL        &kp LBRC              &kp RBRC  &kp KP_PLUS                    &kp KP_MINUS                   &kp KP_MULTIPLY            &trans                           &trans
&kp PRINTSCREEN  &kp INSERT      &trans           &trans             &trans           &kp LBKT              &kp RBKT  &mt LA(LEFT_ARROW) LEFT_ARROW  &mt LA(DOWN_ARROW) DOWN_ARROW  &mt LA(UP_ARROW) UP_ARROW  &mt LA(RIGHT_ARROW) RIGHT_ARROW  &kp KP_DIVIDE
&trans           &kp DEL         &kp PG_UP        &kp CAPS           &kp PG_DN        &kp LPAR              &kp RPAR  &trans                         &trans                         &trans                     &trans                           &trans
                 &trans          &trans           &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans    &kp KP_DOT            &trans                                                        &mo 3
            >;
        };

        SYM {
            bindings = <
&kp F12  &kp F1         &kp F2     &kp F3             &kp F4            &kp F5         &kp F6                         &kp F7            &kp F8     &kp F9        &kp F10        &kp F11
&trans   &kp EXCL       &kp AT     &kp HASH           &kp DLLR          &kp PRCNT                          &kp CARET  &kp AMPS          &kp STAR   &kp QUESTION  &kp SQT        &trans
&trans   &kp PLUS       &kp EQUAL  &kp LPAR           &kp RPAR          &kp DQT                            &kp COLON  &kp LBKT          &kp RBKT   &kp LBRC      &kp RBRC       &trans
&trans   &kp LESS_THAN  &kp PIPE   &kp MINUS          &kp GREATER_THAN  &kp BACKSLASH                      &kp GRAVE  &kp UNDERSCORE    &kp SLASH  &kp TILDE     &kp SEMICOLON  &trans
         &mo 3          &trans     &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &trans         &kt C_FAST_FORWARD             &kp C_PLAY_PAUSE             &trans
            >;
        };

        ADJ {
            bindings = <
&kp F12    &kp F1       &kp F2          &kp F3            &kp F4             &kp F5           &kp F6                &kp F7      &kp F8      &kp F9      &kp F10      &kp F11
&trans     &sys_reset   &bt BT_PRV      &bt BT_NXT        &bt BT_CLR         &out OUT_TOG             &bt BT_SEL 0  &bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &sys_reset   &trans
&soft_off  &bootloader  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT         &kp C_MUTE               &bt BT_SEL 1  &mkp MB1    &mkp MB2    &mkp MB3    &bootloader  &soft_off
&trans     &trans       &mo 5           &mo 4             &kp C_VOLUME_DOWN  &kp C_VOLUME_UP          &bt BT_SEL 2  &trans      &mo 4       &mo 5       &trans       &trans
           &trans       &trans          &trans            &trans             &trans           &trans                &trans                  &trans
            >;
        };

        SNIP {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &mo 5   &trans  &trans  &trans          &trans  &trans    &trans    &mo 5     &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans          &trans              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans    &trans    &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans          &trans              &trans
            >;
        };
    };
};
